name: Computer-Use Acceptance

on:
  workflow_dispatch:
  push:
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

jobs:
  # Job to gather all test files
  test-setup:
    runs-on: ubuntu-latest
    outputs:
      testmo-run-id: ${{ steps.run-tests.outputs.testmo-run-id }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm
      - run: npm ci

      # Optionally add a couple of fields such as the git hash and link to the build
      - run: |
          npx @testmo/testmo-cli automation:resources:add-field --name git --type string \
            --value ${GITHUB_SHA:0:7} --resources resources.json
          RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          npx @testmo/testmo-cli automation:resources:add-link --name build \
            --url $RUN_URL --resources resources.json

      # Create test run
      - run: |
          npx @testmo/testmo-cli automation:run:create \
            --instance "$TESTMO_URL" \
            --project-id 1 \
            --name "TestDriver Acceptance Tests" \
            --resources resources.json \
            --source "TestDriver" > testmo-run-id.txt
          ID=$(cat testmo-run-id.txt)
          echo "testmo-run-id=$ID" >> $GITHUB_OUTPUT
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
        id: run-tests
  gather:
    name: Gather Test Files
    runs-on: ubuntu-latest
    outputs:
      test_files: ${{ steps.test_list.outputs.files }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Find all test files
        id: test_list
        run: |
          FILES=$(ls ./testdriver/acceptance/*.yaml)
          FILENAMES=$(basename -a $FILES)
          FILES_JSON=$(echo "$FILENAMES" | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$FILES_JSON" >> $GITHUB_OUTPUT
  test:
    needs:
      - gather
      - test-setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{ fromJson(needs.gather.outputs.test_files) }}
      max-parallel: 8
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: NODE_ENV=production npm ci
      - name: Spawn AWS Instance
        run: sh aws-setup.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2 
          AMI_ID: ami-085f872ca0cd80fed 
          INSTANCE_TYPE: c5.xlarge 
          AWS_KEY_NAME: alex-rowe2 
          AWS_SECURITY_GROUP_IDS: sg-02309153292e8f1ca 
          AWS_IAM_INSTANCE_PROFILE: gh-auto-runner-role
      - name: Run test in headless mode
        run: node bin/testdriverai.js run testdriver/acceptance/${{ matrix.test }} --junit=out.xml
        env:
          FORCE_COLOR: 3
          TD_API_KEY: ${{ secrets.TESTDRIVER_API_KEY }}
          TD_WEBSITE: https://testdriver-sandbox.vercel.app
          TD_THIS_FILE: ${{ matrix.test }}
      - run: ls
      - name: Upload JUnit report to Testmo
        if: always()
        run: |
          npx @testmo/testmo-cli automation:run:submit-thread \
            --instance "$TESTMO_URL" \
            --run-id "${{ needs.test-setup.outputs.testmo-run-id }}" \
            --results out.xml \
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}

      - name: Upload test results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test }}
          path: out.xml
          retention-days: 30

  test-complete:
    needs: [test-setup, test]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: npm
      - run: npm ci

      # Download all test result artifacts
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test-results
          merge-multiple: true

      # Debug: Check what files were downloaded
      - name: Debug downloaded files
        run: |
          echo "=== Contents of test-results directory ==="
          find test-results -type f -name "*.xml" -ls
          echo "=== Directory structure ==="
          ls -la test-results/
          echo "=== XML file contents preview ==="
          for file in test-results/*.xml; do
            if [ -f "$file" ]; then
              echo "--- Content of $file ---"
              head -10 "$file"
              echo ""
            fi
          done

      # Mark test run completed
      - run: |
          npx @testmo/testmo-cli automation:run:complete \
            --instance "$TESTMO_URL" \
            --run-id "${{ needs.test-setup.outputs.testmo-run-id }}"
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/**/*.xml"
        if: always()
