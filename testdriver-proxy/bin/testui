#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const http = require('http');
const fs = require('fs');
const axios = require('axios');
const yaml = require('js-yaml');
const os = require('os');

const INSTALL_DIR = path.join(__dirname, '..');
const TEST_APP_DIR = path.join(INSTALL_DIR, 'tests', 'ui', 'test-app');
const SERVER_SCRIPT = path.join(INSTALL_DIR, 'server.js');
const TEMP_DIR = path.join(os.tmpdir(), 'testui-temp');

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(color, msg) {
  console.log(colors[color] + msg + colors.reset);
}

function parseArgs() {
  const args = process.argv.slice(2);
  const parsed = {
    prompt: null,
    testFile: null
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith('--prompt=')) {
      parsed.prompt = arg.split('=').slice(1).join('=').replace(/^["']|["']$/g, '');
    } else if (arg.startsWith('--file=')) {
      parsed.testFile = arg.split('=').slice(1).join('=').replace(/^["']|["']$/g, '');
    } else if (!arg.startsWith('-') && !parsed.prompt && !parsed.testFile) {
      // Default positional argument is prompt
      parsed.prompt = arg;
    }
  }

  return parsed;
}

function showHelp() {
  log('cyan', '\n╔════════════════════════════════════════════╗');
  log('cyan', '║  TestUI - AI Agent Test Execution         ║');
  log('cyan', '╚════════════════════════════════════════════╝\n');
  
  console.log('Installation:');
  console.log('  git clone <repo-url>');
  console.log('  cd cli/testdriver-proxy');
  console.log('  npm install');
  console.log('  # testui command is now available globally!\n');
  
  console.log('Usage:');
  console.log('  testui --prompt="natural language test instructions"');
  console.log('  testui --file="path/to/test.yaml"');
  console.log('  testui --prompt="..." --file="test.yaml"  # Enhance existing YAML\n');
  
  console.log('Examples:');
  console.log('  # Natural language (AI generates YAML + runs)');
  console.log('  testui --prompt="test login on https://myapp.com"');
  console.log('  testui --prompt="click all buttons and verify they work"');
  console.log('  testui "navigate to google.com and search for AI"  # Shorthand\n');
  
  console.log('  # Run existing YAML test');
  console.log('  testui --file="tests/checkout-flow.yaml"\n');
  
  console.log('  # Enhance existing YAML with additional prompt');
  console.log('  testui --file="tests/login.yaml" --prompt="also verify logout"\n');
  
  console.log('How it works:');
  console.log('  --prompt: Sends context to AI (glm-4.5V)');
  console.log('            → Generates YAML test');
  console.log('            → Auto-runs the test');
  console.log('  --file:   Runs existing YAML directly');
  console.log('  Both:     AI enhances existing YAML with prompt context\n');
  
  console.log('Environment Variables:');
  console.log('  ANTHROPIC_API_KEY    - Your API key (required)');
  console.log('  TESTUI_PROXY_PORT    - Proxy server port (default: 9876)');
  console.log('  MODEL                - Override model (default: glm-4.5V)\n');
  
  console.log('Note: URLs can be included directly in prompts!');
  console.log('      No separate --app flag needed.\n');
  
  process.exit(0);
}

function checkPort(port) {
  return new Promise((resolve) => {
    const server = http.createServer();
    server.once('error', () => resolve(true));
    server.once('listening', () => {
      server.close();
      resolve(false);
    });
    server.listen(port);
  });
}

async function generateYAMLFromPrompt(prompt, proxyPort, existingYamlPath = null) {
  log('cyan', '\n🤖 Generating test YAML from prompt...');
  log('magenta', `   📝 "${prompt}"\n`);
  
  let existingYamlContent = null;
  if (existingYamlPath) {
    log('blue', `   📄 Enhancing existing YAML: ${existingYamlPath}`);
    existingYamlContent = fs.readFileSync(existingYamlPath, 'utf8');
  }
  
  try {
    const contextPrompt = existingYamlContent 
      ? `${prompt}\n\nExisting YAML test:\n${existingYamlContent}`
      : prompt;
      
    const response = await axios.post(`http://localhost:${proxyPort}/api/v1/testdriver/input`, {
      input: contextPrompt,
      screenshot: '',
      mousePosition: { x: 0, y: 0 },
      activeWindow: 'TestUI',
      stream: false
    }, {
      timeout: 30000,
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (response.data && response.data.commands) {
      // Convert commands to YAML format
      const yamlContent = yaml.dump({
        name: existingYamlPath ? `Enhanced Test: ${path.basename(existingYamlPath)}` : 'Generated Test from Prompt',
        description: prompt,
        steps: response.data.commands
      });
      
      // Save to temp file
      if (!fs.existsSync(TEMP_DIR)) {
        fs.mkdirSync(TEMP_DIR, { recursive: true });
      }
      
      const tempFile = path.join(TEMP_DIR, `test-${Date.now()}.yaml`);
      fs.writeFileSync(tempFile, yamlContent);
      
      log('green', `✅ Generated YAML test file: ${tempFile}`);
      log('cyan', '\nGenerated test steps:');
      console.log(yamlContent);
      
      return tempFile;
    } else {
      throw new Error('Invalid response from proxy /input endpoint');
    }
  } catch (error) {
    log('red', `❌ Failed to generate YAML: ${error.message}`);
    if (error.response) {
      log('yellow', `   Response status: ${error.response.status}`);
      log('yellow', `   Response data: ${JSON.stringify(error.response.data)}`);
    }
    throw error;
  }
}

async function startTestUI(options) {
  log('cyan', '\n╔════════════════════════════════════════════╗');
  log('cyan', '║  TestUI - AI Agent Test Execution         ║');
  log('cyan', '╚════════════════════════════════════════════╝\n');
  
  // Validate API key
  if (!process.env.ANTHROPIC_API_KEY && !process.env.API_KEY) {
    log('red', '❌ ANTHROPIC_API_KEY environment variable not set!');
    log('yellow', '\n📝 Set your API key:');
    log('cyan', '   export ANTHROPIC_API_KEY="your-api-key"\n');
    process.exit(1);
  }
  
  let proxyServer;
  let generatedTestFile = null;
  
  // Determine proxy port (allow override via environment)
  const proxyPort = parseInt(process.env.TESTUI_PROXY_PORT || process.env.PORT || '9876');
  
  try {
    // Start proxy server
    log('cyan', `1️⃣  Starting proxy server (port ${proxyPort})...`);
    proxyServer = spawn('node', [SERVER_SCRIPT], {
      cwd: INSTALL_DIR,
      env: { 
        ...process.env, 
        PORT: String(proxyPort),
        ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY || process.env.API_KEY
      },
      stdio: ['ignore', 'pipe', 'pipe']
    });
    
    await new Promise(resolve => setTimeout(resolve, 3000));
  
    const proxyReady = await checkPort(proxyPort);
    if (!proxyReady) {
      log('red', `❌ Failed to start proxy server on port ${proxyPort}`);
      log('yellow', `   Port ${proxyPort} might be in use. Try TESTUI_PROXY_PORT=<other-port>`);
      proxyServer.kill();
      process.exit(1);
    }
    log('green', `✅ Proxy server ready at http://localhost:${proxyPort}`);
    
    // Set TD_API_ROOT to proxy server URL
    const tdApiRoot = `http://localhost:${proxyPort}`;
    process.env.TD_API_ROOT = tdApiRoot;
    log('blue', `🔗 TD_API_ROOT → ${tdApiRoot}\n`);
    
    // Determine test execution method
    let testFilePath;
    
    if (options.prompt && options.testFile) {
      // Both prompt and file: enhance existing YAML
      log('cyan', '2️⃣  Enhancing existing YAML with prompt...\n');
      testFilePath = await generateYAMLFromPrompt(options.prompt, proxyPort, options.testFile);
      generatedTestFile = testFilePath;
    } else if (options.testFile) {
      // File only: direct execution
      log('cyan', `2️⃣  Running test from file: ${options.testFile}\n`);
      testFilePath = options.testFile;
    } else if (options.prompt) {
      // Prompt only: generate and run
      log('cyan', '2️⃣  Processing natural language prompt...\n');
      testFilePath = await generateYAMLFromPrompt(options.prompt, proxyPort);
      generatedTestFile = testFilePath;
    } else {
      log('red', '❌ No test specified! Provide --prompt or --file parameter.');
      log('yellow', '   Run: testui --help for usage examples\n');
      proxyServer.kill();
      process.exit(1);
    }
    
    log('blue', '─────────────────────────────────────────────');
    log('cyan', `\n3️⃣  Executing test: ${path.basename(testFilePath)}\n`);
    log('blue', '─────────────────────────────────────────────\n');
    
    // Run testdriverai with the YAML file
    const testDriver = spawn('npx', ['--yes', 'testdriverai@latest', 'run', testFilePath], {
      env: { 
        ...process.env, 
        TD_API_ROOT: tdApiRoot,
        ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY || process.env.API_KEY
      },
      stdio: 'inherit'
    });
    
    testDriver.on('exit', (code) => {
      log('blue', '\n─────────────────────────────────────────────');
      log('yellow', '\n🧹 Cleaning up...');
      proxyServer.kill();
      
      // Clean up generated test file
      if (generatedTestFile && fs.existsSync(generatedTestFile)) {
        try {
          fs.unlinkSync(generatedTestFile);
          log('cyan', `   Removed temp file: ${path.basename(generatedTestFile)}`);
        } catch (e) {
          // Ignore cleanup errors
        }
      }
      
      if (code === 0) {
        log('green', '\n✅ Test completed successfully!\n');
      } else {
        log('red', '\n❌ Test failed with exit code: ' + code + '\n');
      }
      process.exit(code);
    });
    
    // Handle cleanup on interrupt
    process.on('SIGINT', () => {
      log('yellow', '\n\n⚠️  Interrupted! Cleaning up...');
      proxyServer.kill();
      if (generatedTestFile && fs.existsSync(generatedTestFile)) {
        try {
          fs.unlinkSync(generatedTestFile);
        } catch (e) {
          // Ignore
        }
      }
      process.exit(130);
    });
    
  } catch (error) {
    log('red', '\n❌ Error: ' + error.message);
    if (error.stack) log('yellow', error.stack);
    if (proxyServer) proxyServer.kill();
    if (generatedTestFile && fs.existsSync(generatedTestFile)) {
      try {
        fs.unlinkSync(generatedTestFile);
      } catch (e) {
        // Ignore
      }
    }
    process.exit(1);
  }
}

// Main execution
const args = parseArgs();

if (process.argv.length < 3 || process.argv.includes('--help') || process.argv.includes('-h')) {
  showHelp();
}

if (!args.prompt && !args.testFile) {
  log('red', '\n❌ No test specified!');
  log('yellow', '\nProvide either:');
  log('cyan', '  PROMPT="natural language test"');
  log('cyan', '  TEST="path/to/test.yaml"\n');
  log('yellow', 'Run with --help for more info\n');
  process.exit(1);
}

startTestUI(args).catch(err => {
  log('red', '\n❌ Error: ' + err.message);
  log('red', err.stack);
  process.exit(1);
});
