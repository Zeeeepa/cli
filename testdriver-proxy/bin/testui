#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const http = require('http');
const fs = require('fs');

const INSTALL_DIR = path.join(__dirname, '..');
const TEST_APP_DIR = path.join(INSTALL_DIR, 'tests', 'ui', 'test-app');
const SERVER_SCRIPT = path.join(INSTALL_DIR, 'server.js');

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(color, msg) {
  console.log(colors[color] + msg + colors.reset);
}

function parseArgs() {
  const args = process.argv.slice(2);
  const parsed = {
    prompt: null,
    testFile: null,
    appUrl: null
  };

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    if (arg.startsWith('PROMPT=')) {
      parsed.prompt = arg.split('=')[1].replace(/^["']|["']$/g, '');
    } else if (arg.startsWith('TEST=')) {
      parsed.testFile = arg.split('=')[1].replace(/^["']|["']$/g, '');
    } else if (arg.startsWith('APP=')) {
      parsed.appUrl = arg.split('=')[1].replace(/^["']|["']$/g, '');
    } else if (!arg.startsWith('-') && !parsed.prompt) {
      // Default positional argument is prompt
      parsed.prompt = arg;
    }
  }

  return parsed;
}

function showHelp() {
  log('cyan', '\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('cyan', '‚ïë  TestUI - AI Agent Test Execution         ‚ïë');
  log('cyan', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  
  console.log('Usage:');
  console.log('  testui PROMPT="your natural language test"');
  console.log('  testui TEST="path/to/test.yaml"');
  console.log('  testui APP="http://your-app:4000" PROMPT="test instructions"\n');
  
  console.log('Examples:');
  console.log('  testui PROMPT="login with demo@testdriver.ai"');
  console.log('  testui TEST="tests/login.yaml"');
  console.log('  testui "click all buttons"  # Positional prompt\n');
  
  console.log('Environment Variables:');
  console.log('  ANTHROPIC_API_KEY  - Your Z.ai API key (required)');
  console.log('  APP_URL           - Override default test app URL\n');
  
  process.exit(0);
}

function checkPort(port) {
  return new Promise((resolve) => {
    const server = http.createServer();
    server.once('error', () => resolve(true));
    server.once('listening', () => {
      server.close();
      resolve(false);
    });
    server.listen(port);
  });
}

async function startTestUI(options) {
  log('cyan', '\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('cyan', '‚ïë  TestUI - AI Agent Test Execution         ‚ïë');
  log('cyan', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  
  // Validate API key
  if (!process.env.ANTHROPIC_API_KEY) {
    log('red', '‚ùå ANTHROPIC_API_KEY environment variable not set!');
    log('yellow', '\nüìù Set your Z.ai API key:');
    log('cyan', '   export ANTHROPIC_API_KEY="your-zai-api-key"\n');
    process.exit(1);
  }
  
  const startOwnApp = !options.appUrl;
  let testApp, proxyServer;
  
  try {
    // Start test app if needed
    if (startOwnApp) {
      const testAppServer = path.join(TEST_APP_DIR, 'server.js');
      if (!fs.existsSync(testAppServer)) {
        log('red', '‚ùå Test app not found at: ' + testAppServer);
        process.exit(1);
      }
      
      log('cyan', '1Ô∏è‚É£  Starting test UI app (port 4000)...');
      testApp = spawn('node', [testAppServer], {
        cwd: TEST_APP_DIR,
        stdio: ['ignore', 'pipe', 'pipe']
      });
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const testAppReady = await checkPort(4000);
      if (!testAppReady) {
        log('red', '‚ùå Failed to start test app on port 4000');
        testApp.kill();
        process.exit(1);
      }
      log('green', '‚úÖ Test app ready at http://localhost:4000');
    } else {
      log('blue', `üåê Using external app: ${options.appUrl}`);
    }
    
    // Start proxy server
    log('cyan', '\n2Ô∏è‚É£  Starting proxy server (port 9876)...');
    proxyServer = spawn('node', [SERVER_SCRIPT], {
      cwd: INSTALL_DIR,
      env: { 
        ...process.env, 
        PORT: '9876',
        ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY
      },
      stdio: ['ignore', 'pipe', 'pipe']
    });
    
    await new Promise(resolve => setTimeout(resolve, 2000));
  
    const proxyReady = await checkPort(9876);
    if (!proxyReady) {
      log('red', '‚ùå Failed to start proxy server on port 9876');
      if (testApp) testApp.kill();
      proxyServer.kill();
      process.exit(1);
    }
    log('green', '‚úÖ Proxy server ready at http://localhost:9876');
    
    // Determine test execution method
    const appUrl = options.appUrl || 'http://localhost:4000';
    let testDriverArgs;
    
    if (options.testFile) {
      log('cyan', `\n3Ô∏è‚É£  Running test from file: ${options.testFile}\n`);
      testDriverArgs = ['testdriverai', 'run', '--url', appUrl, '--file', options.testFile];
    } else if (options.prompt) {
      log('cyan', `\n3Ô∏è‚É£  Running natural language test...\n`);
      log('magenta', `   üìù "${options.prompt}"\n`);
      testDriverArgs = ['testdriverai', 'run', '--url', appUrl, '--prompt', options.prompt];
    } else {
      log('red', '‚ùå No test specified! Provide PROMPT or TEST parameter.');
      if (testApp) testApp.kill();
      proxyServer.kill();
      process.exit(1);
    }
    
    log('blue', '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const testDriver = spawn('npx', testDriverArgs, {
      env: { 
        ...process.env, 
        TD_API_ROOT: 'http://localhost:9876',
        ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY
      },
      stdio: 'inherit'
    });
    
    testDriver.on('exit', (code) => {
      log('blue', '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      log('yellow', '\nüßπ Cleaning up...');
      if (testApp) testApp.kill();
      proxyServer.kill();
      
      if (code === 0) {
        log('green', '\n‚úÖ Test completed successfully!\n');
      } else {
        log('red', '\n‚ùå Test failed with exit code: ' + code + '\n');
      }
      process.exit(code);
    });
    
    // Handle cleanup on interrupt
    process.on('SIGINT', () => {
      log('yellow', '\n\n‚ö†Ô∏è  Interrupted! Cleaning up...');
      if (testApp) testApp.kill();
      proxyServer.kill();
      process.exit(130);
    });
    
  } catch (error) {
    log('red', '\n‚ùå Error: ' + error.message);
    if (testApp) testApp.kill();
    if (proxyServer) proxyServer.kill();
    process.exit(1);
  }
}

// Main execution
const args = parseArgs();

if (process.argv.length < 3 || process.argv.includes('--help') || process.argv.includes('-h')) {
  showHelp();
}

if (!args.prompt && !args.testFile) {
  log('red', '\n‚ùå No test specified!');
  log('yellow', '\nProvide either:');
  log('cyan', '  PROMPT="natural language test"');
  log('cyan', '  TEST="path/to/test.yaml"\n');
  log('yellow', 'Run with --help for more info\n');
  process.exit(1);
}

startTestUI(args).catch(err => {
  log('red', '\n‚ùå Error: ' + err.message);
  log('red', err.stack);
  process.exit(1);
});
