#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const http = require('http');

const INSTALL_DIR = path.join(__dirname, '..');
const TEST_APP_DIR = path.join(INSTALL_DIR, 'tests', 'ui', 'test-app');
const SERVER_SCRIPT = path.join(INSTALL_DIR, 'server.js');

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  blue: '\x1b[34m'
};

function log(color, msg) {
  console.log(colors[color] + msg + colors.reset);
}

function checkPort(port) {
  return new Promise((resolve) => {
    const server = http.createServer();
    server.once('error', () => resolve(true)); // Port in use = service running
    server.once('listening', () => {
      server.close();
      resolve(false); // Port free = service not running
    });
    server.listen(port);
  });
}

async function startTestUI(testInput) {
  log('cyan', '\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('cyan', '‚ïë  TestUI - AI Agent Test Execution         ‚ïë');
  log('cyan', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  
  // Check if test app exists
  const testAppServer = path.join(TEST_APP_DIR, 'server.js');
  const fs = require('fs');
  if (!fs.existsSync(testAppServer)) {
    log('red', '‚ùå Test app not found at: ' + testAppServer);
    process.exit(1);
  }
  
  log('blue', 'üìã Test Command: ' + testInput);
  log('yellow', '\n‚è≥ Starting test environment...\n');
  
  // Start test app on port 4000
  log('cyan', '1Ô∏è‚É£  Starting test UI app (port 4000)...');
  const testApp = spawn('node', [testAppServer], {
    cwd: TEST_APP_DIR,
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  // Wait for test app to start
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const testAppReady = await checkPort(4000);
  if (!testAppReady) {
    log('red', '‚ùå Failed to start test app on port 4000');
    testApp.kill();
    process.exit(1);
  }
  log('green', '‚úÖ Test app ready at http://localhost:4000');
  
  // Start proxy server on port 9876
  log('cyan', '\n2Ô∏è‚É£  Starting proxy server (port 9876)...');
  const proxyServer = spawn('node', [SERVER_SCRIPT], {
    cwd: INSTALL_DIR,
    env: { ...process.env, PORT: '9876', API_KEY: process.env.API_KEY || 'test' },
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  // Wait for proxy to start
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  const proxyReady = await checkPort(9876);
  if (!proxyReady) {
    log('red', '‚ùå Failed to start proxy server on port 9876');
    testApp.kill();
    proxyServer.kill();
    process.exit(1);
  }
  log('green', '‚úÖ Proxy server ready at http://localhost:9876');
  
  // Execute test via TestDriver CLI
  log('cyan', '\n3Ô∏è‚É£  Executing test with AI agent...\n');
  log('blue', '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const testDriver = spawn('npx', [
    'testdriverai', 'run',
    '--url', 'http://localhost:4000',
    '--prompt', testInput
  ], {
    env: { 
      ...process.env, 
      TD_API_ROOT: 'http://localhost:9876',
      API_KEY: process.env.API_KEY || 'test'
    },
    stdio: 'inherit'
  });
  
  testDriver.on('exit', (code) => {
    log('blue', '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    log('yellow', '\nüßπ Cleaning up...');
    testApp.kill();
    proxyServer.kill();
    
    if (code === 0) {
      log('green', '\n‚úÖ Test completed successfully!\n');
    } else {
      log('red', '\n‚ùå Test failed with exit code: ' + code + '\n');
    }
    process.exit(code);
  });
  
  // Handle cleanup on interrupt
  process.on('SIGINT', () => {
    log('yellow', '\n\n‚ö†Ô∏è  Interrupted! Cleaning up...');
    testApp.kill();
    proxyServer.kill();
    process.exit(130);
  });
}

if (process.argv.length < 3) {
  log('cyan', '\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  log('cyan', '‚ïë  TestUI - AI Agent Test Execution         ‚ïë');
  log('cyan', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
  log('yellow', 'Usage:');
  log('cyan', '  testui "your natural language test command"\n');
  log('yellow', 'Examples:');
  log('cyan', '  testui "login with demo@testdriver.ai"');
  log('cyan', '  testui "click all buttons and verify"');
  log('cyan', '  testui "fill form and submit"\n');
  log('yellow', 'Environment:');
  log('cyan', '  API_KEY     - Your Z.ai or Anthropic API key');
  log('cyan', '  TD_API_ROOT - Proxy server URL (auto-configured)\n');
  process.exit(0);
}

const testInput = process.argv.slice(2).join(' ');
startTestUI(testInput).catch(err => {
  log('red', '\n‚ùå Error: ' + err.message);
  process.exit(1);
});
